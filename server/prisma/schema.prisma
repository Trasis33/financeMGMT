// This is your Prisma schema file
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  password              String
  name                  String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  transactions          Transaction[]
  createdSplitExpenses  SplitExpense[]         @relation("Creator")
  splitExpenses         SplitExpenseParticipant[]
  refreshTokens         RefreshTokens[]          // Add this relation
}

model RefreshTokens {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime @default(now())
  isRevoked   Boolean  @default(false)
  userAgent   String?  // Store browser/device info
  ipAddress   String?  // Store IP for security tracking
}

model Transaction {
  id          Int      @id @default(autoincrement())
  date        DateTime
  description String
  amount      Float
  type        String   // 'INCOME' or 'EXPENSE'
  category    String
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SplitExpense {
  id            Int                      @id @default(autoincrement())
  description   String
  amount        Float
  date          DateTime
  creatorId     Int
  creator       User                     @relation("Creator", fields: [creatorId], references: [id], onDelete: Cascade)
  participants  SplitExpenseParticipant[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
}

model SplitExpenseParticipant {
  id             Int          @id @default(autoincrement())
  splitExpenseId Int
  userId         Int
  share          Float       // Share of the expense (e.g., 0.5 for 50%)
  settled        Boolean     @default(false) // Whether the participant has settled their share
  splitExpense   SplitExpense @relation(fields: [splitExpenseId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([splitExpenseId, userId])
}
